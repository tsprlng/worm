-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/

@package worm
@version 0.0.0


-- | This module is a library to maybe keep command-line tool users
--   slightly happier, by whimsically illustrating progress in slow-running
--   parallel processes with a mildly entertaining animated worm that
--   crawls slowly from left to right and back again, while displaying
--   textual progress from flexible sources of input.
module Worm

-- | The <a>Progress</a> type is a general wrapper for
--   <a>Control.Concurrent.MVar</a>-ish things we can read and show next to
--   the animation, while another (worker) thread updates them. To add
--   another form of showable progress information, declare a new type
--   which implements <a>Progress_</a>, and a constructor (like
--   <a>rawProgress</a>) to wrap that type in <a>Progress</a>.
data Progress
Progress :: p -> Progress

-- | Class for formattable progress information types.
class Progress_ p

-- | A function that should (quickly) produce formatted progress
--   information, for example by reading it from a wrapped <a>MVar</a>.
formatProgress :: Progress_ p â‡’ p -> IO String

-- | Displays (in brackets) a 'Control.Concurrent.MVar.MVar String' that
--   you're free to update any way you choose.
rawProgress :: MVar String -> Progress

-- | Displays as (43/200), where either side of the fraction-wall can be
--   independently updated.
collectingProgress :: MVar Int -> MVar Int -> Progress

-- | Action you can invoke to atomically stop/erase the worm before
--   outputting real information, so your output goes unmangled.
type Canceller = IO ()

-- | Starts worm animation with given progress information; gives you a
--   <a>Canceller</a> to invoke when finished.
wormProgress :: [Progress] -> IO Canceller

-- | An example of basic usage.
main :: IO ()
instance Worm.Progress_ Worm.Progress
instance Worm.Progress_ Worm.RawProgress
instance Worm.Progress_ Worm.CollectingProgress
